import Mathlib.Tactic
import Mathlib.Topology.Filter
import Mathlib.Topology.Order

open Topology TopologicalSpace Set Function Classical Filter
def ParticularPointTopology (Œ± : Type*) (p : Œ±) := Œ±

namespace ParticularPointTopology

instance {Œ± : Type*} (p : Œ±) : Inhabited (ParticularPointTopology Œ± p) where
  default := p

def of : Œ± ‚âÉ ParticularPointTopology Œ± p:=
  Equiv.refl Œ±

variable {Œ± : Type*} (p : Œ±)

instance : TopologicalSpace (ParticularPointTopology Œ± p) where
  IsOpen s := s.Nonempty ‚Üí p ‚àà s
  isOpen_univ := by simp
  isOpen_inter s t := by
    rintro hs ht ‚ü®x, hxs, hxt‚ü©
    exact ‚ü®hs ‚ü®x, hxs‚ü©, ht ‚ü®x, hxt‚ü©‚ü©
  isOpen_sUnion := by
    rintro s h ‚ü®x, t, hts, hxt‚ü©
    exact mem_sUnion_of_mem (h t hts ‚ü®x, hxt‚ü©) hts

theorem isOpen_iff {s : Set (ParticularPointTopology Œ± p)} : IsOpen s ‚Üî s.Nonempty ‚Üí p ‚àà s :=
  Iff.rfl

theorem isOpen_iff' {s : Set (ParticularPointTopology Œ± p)} : IsOpen s ‚Üî s = ‚àÖ ‚à® p ‚àà s := by
  simp only [isOpen_iff, nonempty_iff_ne_empty, or_iff_not_imp_left]

theorem isClosed_iff {s : Set (ParticularPointTopology Œ± p)} : IsClosed s ‚Üî s = univ ‚à® p ‚àâ s := by
  simp only [‚Üê isOpen_compl_iff, isOpen_iff', compl_empty_iff, mem_compl_iff]

theorem nhds_eq (a : (ParticularPointTopology Œ± p)) : ùìù a = ùìü {a, p} := by
  ext x
  simp [_root_.mem_nhds_iff, isOpen_iff]
  constructor
  intro ‚ü®t, htx, htp, hta‚ü©
  refine insert_subset (htx hta) (singleton_subset_iff.mpr (htx (htp (nonempty_of_mem hta))))
  refine fun h ‚Ü¶ ‚ü®{a, p}, h, fun _ ‚Ü¶ mem_insert_of_mem a rfl, mem_insert a {p}‚ü©

theorem mem_nhds_iff {a : (ParticularPointTopology Œ± p)} {s : Set (ParticularPointTopology Œ± p)} :
    s ‚àà ùìù a ‚Üî a ‚àà s ‚àß p ‚àà s := by
    simp [nhds_eq]
    constructor
    refine fun h ‚Ü¶ ‚ü®h <| mem_insert a {p}, h <| mem_insert_of_mem a rfl‚ü©
    intro h x hx
    aesop

theorem empty_interior_of_closed {s : Set (ParticularPointTopology Œ± p)} (hs : IsClosed s) (huniv : s ‚â† univ)
  : interior s = ‚àÖ := by
  simp only [isClosed_iff] at hs
  rcases hs with h | h
  ¬∑ contradiction
  ¬∑ have : p ‚àâ interior s := not_mem_subset interior_subset h
    rcases (@isOpen_iff' _ _ (interior s)).mp <| isOpen_interior
    ¬∑ assumption
    ¬∑ contradiction

theorem lem_not_valid (p : Œ±) (hp : {p} ‚â† univ) : {‚Üëp} ‚à™ (interior {‚Üëp}·∂ú) ‚â† (univ : Set (ParticularPointTopology Œ± p)) := by
  rcases (isOpen_iff' _).mp isOpen_interior with h | h
  ¬∑ rw [h]
    aesop
  ¬∑ rw [empty_interior_of_closed]
    ¬∑ aesop
    ¬∑ simp [isClosed_iff]
      simp [isOpen_iff]
    ¬∑ aesop




end ParticularPointTopology
