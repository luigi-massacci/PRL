import Mathlib.Tactic
import Mathlib.Topology.Filter
import Mathlib.Topology.Order

open Topology TopologicalSpace Set Function Classical
def ParticularPointTopology (Œ± : Type*) (p : Œ±) := Œ±

namespace ParticularPointTopology

instance {Œ± : Type*} (p : Œ±) : Inhabited (ParticularPointTopology Œ± p) where
  default := p

def of : Œ± ‚âÉ ParticularPointTopology Œ± p:=
  Equiv.refl Œ±

variable {Œ± : Type*} (p : Œ±)

instance : TopologicalSpace (ParticularPointTopology Œ± p) where
  IsOpen s := s.Nonempty ‚Üí p ‚àà s
  isOpen_univ := by simp
  isOpen_inter s t := by
    rintro hs ht ‚ü®x, hxs, hxt‚ü©
    exact ‚ü®hs ‚ü®x, hxs‚ü©, ht ‚ü®x, hxt‚ü©‚ü©
  isOpen_sUnion := by
    rintro s h ‚ü®x, t, hts, hxt‚ü©
    exact mem_sUnion_of_mem (h t hts ‚ü®x, hxt‚ü©) hts

theorem isOpen_iff {s : Set (ParticularPointTopology Œ± p)} : IsOpen s ‚Üî s.Nonempty ‚Üí p ‚àà s :=
  Iff.rfl

theorem isOpen_iff' {s : Set (ParticularPointTopology Œ± p)} : IsOpen s ‚Üî s = ‚àÖ ‚à® p ‚àà s := by
  simp only [isOpen_iff, nonempty_iff_ne_empty, or_iff_not_imp_left]

-- theorem isClosed_iff {s : Set (CofiniteTopology Œ±)} : IsClosed s ‚Üî s = univ ‚à® s.Finite := by
--   simp only [‚Üê isOpen_compl_iff, isOpen_iff', compl_compl, compl_empty_iff]

-- theorem nhds_eq (a : (ParticularPointTopology Œ± p)) : ùìù a = pure p ‚äì pure a := by
--   ext x
--   simp [mem_nhds_iff, isOpen_iff]
--   constructor
--   intro ‚ü®t, htx, htp, hta‚ü©
--   exact Filter.mem_inf_of_right (htx hta)
--   rintro ‚ü®s, hsp, v, hva, hx‚ü©
--   refine ‚ü®x, Eq.subset rfl, ?_‚ü©







-- theorem mem_nhds_iff {a : CofiniteTopology Œ±} {s : Set (CofiniteTopology Œ±)} :
--     s ‚àà ùìù a ‚Üî a ‚àà s ‚àß s·∂ú.Finite := by simp [nhds_eq]
-- #align cofinite_topology.mem_nhds_iff CofiniteTopology.mem_nhds_iff



theorem empty_interior_of_closed {s : Set (CofiniteTopology Œ±)} (hs : IsClosed s) : s = ‚àÖ := by
  sorry







end ParticularPointTopology
