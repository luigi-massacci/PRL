import Mathlib.Tactic
import Mathlib.Topology.Filter
import Mathlib.Topology.Order

open Topology TopologicalSpace Set Function Classical Filter

/-!
# Particular Point topology

This file introduces the Scott Particular Point topology on a type.

## Main definitions


## Main statements


## Implementation notes


## References


## Tags

Particular Point topology
-/

section ParticularPoint

/- A nonempty set `s` is open in the Particular Point topology iff
it contains some particular point p -/
def ParticularPoint (Œ± : Type*) (p : Œ±) : TopologicalSpace Œ± where
  IsOpen s := s.Nonempty ‚Üí p ‚àà s
  isOpen_univ := by simp only [mem_univ, implies_true]
  isOpen_inter s t := by
    rintro hs ht ‚ü®x, hxs, hxt‚ü©
    exact ‚ü®hs ‚ü®x, hxs‚ü©, ht ‚ü®x, hxt‚ü©‚ü©
  isOpen_sUnion := by
    rintro s h ‚ü®x, t, hts, hxt‚ü©
    exact mem_sUnion_of_mem (h t hts ‚ü®x, hxt‚ü©) hts

variable (Œ± : Type*) (p : Œ±) [TopologicalSpace Œ±]

/-- Predicate for a topological space to be equipped with the Particular Point Topology for some point. -/
class IsParticularPoint : Prop where
  topology_eq_particularPoint : ‚ÄπTopologicalSpace Œ±‚Ä∫ = ParticularPoint Œ± p

instance : @IsParticularPoint Œ± p (ParticularPoint Œ± p) :=
  @IsParticularPoint.mk _ _ (ParticularPoint Œ± p) rfl

namespace IsParticularPoint
variable (Œ±: Type*) (p : Œ±) [TopologicalSpace Œ±] [IsParticularPoint Œ± p] {s : Set Œ±}

lemma topology_eq : ‚Äπ_‚Ä∫ = ParticularPoint Œ± p := topology_eq_particularPoint

lemma isOpen_iff :
    IsOpen s ‚Üî s.Nonempty ‚Üí p ‚àà s := by erw [@topology_eq Œ± p _]; rfl

lemma isOpen_iff' : IsOpen s ‚Üî s = ‚àÖ ‚à® p ‚àà s := by
  simp only [isOpen_iff Œ± p, nonempty_iff_ne_empty, or_iff_not_imp_left]

theorem isClosed_iff : IsClosed s ‚Üî s = univ ‚à® p ‚àâ s := by
  simp only [‚Üê isOpen_compl_iff, isOpen_iff' Œ± p , compl_empty_iff, mem_compl_iff]

theorem nhds_eq (a : Œ±) : ùìù a = ùìü {a, p} := by
  ext u
  simp [_root_.mem_nhds_iff, isOpen_iff]
  constructor
  intro ‚ü®t, htu, htp, hta‚ü©
  refine insert_subset (htu hta) (singleton_subset_iff.mpr (htu ?_))
  exact (isOpen_iff Œ± p).mp htp (Set.nonempty_of_mem hta)
  refine fun h ‚Ü¶ ‚ü®{a, p}, h, ?_, mem_insert a {p}‚ü©
  refine (isOpen_iff Œ± p).mpr (fun _ ‚Ü¶ mem_insert_of_mem a rfl)

theorem mem_nhds_iff {a : Œ±} :
    s ‚àà ùìù a ‚Üî a ‚àà s ‚àß p ‚àà s := by
    simp [nhds_eq Œ± p]
    constructor
    refine fun h ‚Ü¶ ‚ü®h <| mem_insert a {p}, h <| mem_insert_of_mem a rfl‚ü©
    rintro ‚ü®as, ps‚ü© x (hx | hx) <;> (rw [hx]; assumption)

theorem empty_interior_of_closed (hs : IsClosed s) (huniv : s ‚â† univ)
  : interior s = ‚àÖ := by
  simp only [isClosed_iff Œ± p] at hs
  rcases hs with h | h
  ¬∑ contradiction
  ¬∑ have : p ‚àâ interior s := not_mem_subset interior_subset h
    rcases (@isOpen_iff' Œ± p _ _ (interior s)).mp <| isOpen_interior
    ¬∑ assumption
    ¬∑ contradiction

end IsParticularPoint

def WithParticularPoint (Œ± : Type*) (p : Œ±) := Œ±

namespace WithParticularPoint

@[match_pattern] def toParticularPoint : Œ± ‚âÉ WithParticularPoint Œ± p := Equiv.refl _

/-- `ofParticularPoint` is the identity function from the `WithParticularPoint` of a type. -/
@[match_pattern] def ofParticularPoint : WithParticularPoint Œ± p ‚âÉ Œ± := Equiv.refl _

@[simp] lemma toParticularPoint_symm_eq : (@toParticularPoint Œ± p).symm = ofParticularPoint Œ± p:= rfl
@[simp] lemma ofParticularPoint_symm_eq : (@ofParticularPoint Œ± p).symm = toParticularPoint Œ± p := rfl
@[simp] lemma toParticularPoint_ofParticularPoint (a : WithParticularPoint Œ± p) : toParticularPoint Œ± p (ofParticularPoint Œ± p a) = a := rfl
@[simp] lemma ofParticularPoint_toParticularPoint (a : Œ±) : ofParticularPoint Œ± p (toParticularPoint Œ± p a) = a := rfl


/-- A recursor for `WithParticularPoint`. Use as `induction x using WithParticularPoint.rec`. -/
protected def rec {Œ≤ : WithParticularPoint Œ± p ‚Üí Sort _}
    (h : ‚àÄ a, Œ≤ (toParticularPoint Œ± p a)) : ‚àÄ a, Œ≤ a := fun a ‚Ü¶ h (ofParticularPoint Œ± p a)

instance : Nonempty (WithParticularPoint Œ± p) := by exact Nonempty.intro p
instance : Inhabited (WithParticularPoint Œ± p) := by exact { default := p }

instance : TopologicalSpace (WithParticularPoint Œ± p) := ParticularPoint Œ± p
instance : IsParticularPoint (WithParticularPoint Œ± p) p := ‚ü®rfl‚ü©

end WithParticularPoint

open IsParticularPoint

instance : T0Space (WithParticularPoint Œ± p) where
  t0 x y h:= by
    have : y ‚àà {x, p} ‚àß p ‚àà {x, p} := by
      rw [‚Üê (@mem_nhds_iff (WithParticularPoint Œ± p) _ _ _ {x, p}), ‚Üê h];
      simp [@nhds_eq (WithParticularPoint Œ± p) p, subset_refl]
    have : x ‚àà {y, p} ‚àß p ‚àà {y, p} := by
      rw [‚Üê (@mem_nhds_iff (WithParticularPoint Œ± p) _ _ _ {y, p}), h];
      simp [@nhds_eq (WithParticularPoint Œ± p) p, subset_refl]
    aesop

instance : SeparableSpace (WithParticularPoint Œ± p) where
  exists_countable_dense := by
    refine ‚ü®{p}, countable_singleton p, dense_iff_inter_open.mpr ?_‚ü©
    refine fun U h‚ÇÅ h‚ÇÇ ‚Ü¶ inter_singleton_nonempty.mpr <| (isOpen_iff (WithParticularPoint Œ± p) p).mp h‚ÇÅ h‚ÇÇ

instance : FirstCountableTopology (WithParticularPoint Œ± p) where
  nhds_generated_countable := by
    refine fun a ‚Ü¶ ‚ü®{{a, p}}, ?_‚ü©
    simp only [countable_singleton, nhds_eq (WithParticularPoint Œ± p) p, generate_singleton, and_self]

end ParticularPoint
